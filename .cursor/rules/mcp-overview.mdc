---
description: 
globs: 
alwaysApply: false
---
# MCP (Model Context Protocol) Overview

The Model Context Protocol (MCP) is a framework for defining consistent interaction patterns between AI models and development environments. This guide explains the core concepts and implementation of MCP within the Toy Programmer project.

## Core Concepts

MCP provides structured rules that help AI models:

1. **Understand Context**: Recognize the specific environment, language, and technologies in use
2. **Apply Best Practices**: Follow consistent patterns tailored to specific tools and languages
3. **Generate Appropriate Code**: Produce code that matches project standards and requirements
4. **Maintain Consistency**: Keep a uniform approach across different AI interactions

## MCP Structure

An MCP definition consists of:

```json
{
  "context": {
    // Global context for the rules
    "tool": "string",
    "language": "string",
    "version": "string",
    "purpose": "string",
    "priority": "string"
  },
  "rules": [
    {
      "id": "unique_identifier",
      "description": "Human-readable description",
      "patterns": [
        "Pattern 1",
        "Pattern 2",
        "..."
      ]
    }
  ]
}
```

## Implementing MCP in Projects

To implement MCP in your development workflow:

1. **Define Rule Sets**: Create specific rule sets for each technology or pattern
2. **Store Rules**: Keep rule definitions in dedicated files (e.g., `.mcp/rules/`)
3. **Reference in AI Prompts**: Include references to MCP rules in AI prompts
4. **Validate Output**: Ensure AI-generated code follows the defined patterns

## MCP Integration with Cursor

Cursor can integrate MCP rules through:

1. **Custom Instructions**: Reference MCP rules in custom AI instructions
2. **Prompt Templates**: Create templates that include relevant MCP contexts
3. **Project Configuration**: Store MCP definitions in project settings

## Available MCP Rule Sets

The following MCP rule sets are available in this project:

1. [**Cursor MCP Rules**](mdc:cursor-mcp-rules.md): Optimize Cursor editor for Go, Dagger, and Docker
2. [**Go MCP Rules**](mdc:go-mcp-rules.md): Go language patterns and best practices
3. [**Dagger MCP Rules**](mdc:dagger-mcp-rules.md): Dagger CI/CD and container workflow patterns
4. [**Docker MCP Rules**](mdc:docker-mcp-rules.md): Docker containerization best practices

## Example Usage

Here's an example of how to reference MCP rules in an AI prompt:

```
@context: Go, Dagger, Docker
@mcp: cursor-mcp-rules.md, go-mcp-rules.md, dagger-mcp-rules.md, docker-mcp-rules.md

Please help me create a Dagger module that builds a Go application and containerizes it with Docker. Follow the MCP rules for all technologies involved.
```

## Benefits of MCP

- **Consistency**: Maintains uniform code style and patterns
- **Quality**: Ensures adherence to best practices
- **Efficiency**: Reduces the need to repeat the same instructions
- **Adaptability**: Allows for technology-specific rule sets
- **Evolution**: Can be updated as project requirements change

## Creating Custom MCP Rules

To create custom MCP rules:

1. Identify the patterns that are important for your project
2. Create a new JSON structure following the MCP format
3. Store it in a dedicated file in the `.mcp/rules/` directory
4. Reference it in AI prompts when needed

## MCP Integration with Other Tools

MCP patterns can be integrated with:

- **Linters**: Configure linters to enforce the same patterns
- **CI/CD**: Validate generated code against MCP rules
- **Documentation**: Generate documentation that follows MCP patterns
- **Team Guidelines**: Align team practices with MCP rules

## Remember

MCP is a flexible framework that should evolve with your project. Regularly review and update your MCP rules to ensure they reflect current best practices and project requirements. 